User (users)	id (UUID, PK), name (string), email (string, unique), password (hashed string), age (integer), gender (enum), location (string), bio (text), profilePhoto (string, optional), createdAt (timestamp), updatedAt (timestamp)	🔗 One-to-Many with Match, Chats, BlindChats, Likes, Reports, Notifications	Stores user data
Interest (interests)	id (UUID, PK), name (string, unique)	🔗 Many-to-Many with User via UserInterest	Stores predefined interests
UserInterest (user_interests)	id (UUID, PK), userId (FK to users), interestId (FK to interests)	🔗 Many-to-Many linking table between User and Interest	Maps users to their selected interests
Match (matches)	id (UUID, PK), user1Id (FK to users), user2Id (FK to users), status (enum: pending, accepted, rejected), createdAt (timestamp)	🔗 Many-to-Many between Users	Stores matches after mutual likes
BlindChat (blind_chats)	id (UUID, PK), user1Id (FK to users), user2Id (FK to users), status (enum: active, expired), startTime (timestamp), endTime (timestamp)	🔗 Many-to-Many between Users	Stores anonymous blind chat sessions
BlindChatMessage (blind_chat_messages)	id (UUID, PK), blindChatId (FK to blind_chats), senderId (FK to users), message (text), timestamp (timestamp)	🔗 One-to-Many with BlindChat	Stores messages sent during blind chat
Chat (chats)	id (UUID, PK), user1Id (FK to users), user2Id (FK to users), createdAt (timestamp)	🔗 Many-to-Many between Users	Stores chat sessions between matched users
Message (messages)	id (UUID, PK), chatId (FK to chats), senderId (FK to users), message (text), timestamp (timestamp), read (boolean)	🔗 One-to-Many with Chat	Stores chat messages
Like (likes)	id (UUID, PK), likerId (FK to users), likedId (FK to users), status (enum: pending, matched, rejected), timestamp (timestamp)	🔗 Many-to-Many between Users	Stores likes and rejections
Report (reports)	id (UUID, PK), reporterId (FK to users), reportedId (FK to users), reason (text), status (enum: pending, resolved), timestamp (timestamp)	🔗 Many-to-Many between Users	Stores user reports
Notification (notifications)	id (UUID, PK), userId (FK to users), type (enum: match, message, blind_chat, like, report), message (text), read (boolean), timestamp (timestamp)	🔗 One-to-Many w



1️⃣ Authentication & User Management (/auth)
Method	Endpoint	Operation Name	Description
POST	/auth/signup	registerUser	User signup with email & password
POST	/auth/login	loginUser	User login
POST	/auth/logout	logoutUser	Logout user
GET	/auth/me	getCurrentUser	Get authenticated user profile
PUT	/auth/update-profile	updateUserProfile	Update user profile
PUT	/auth/update-password	updateUserPassword	Change password
DELETE	/auth/delete-account	deleteUserAccount	Delete user account
2️⃣ Profile Management (/profiles)
Method	Endpoint	Operation Name	Description
GET	/profiles/:userId	getUserProfile	Get user profile by ID
GET	/profiles	getAllProfiles	Get list of all user profiles
PUT	/profiles/:userId	editUserProfile	Edit user profile
POST	/profiles/interests	updateUserInterests	Update user interests
POST	/profiles/photo	uploadProfilePhoto	Upload profile picture
3️⃣ Matching System (/matching)
Method	Endpoint	Operation Name	Description
GET	/matching/suggestions	getSuggestedMatches	Get match suggestions based on interests
POST	/matching/like/:userId	likeUser	Like a profile
POST	/matching/pass/:userId	passUser	Pass on a profile
GET	/matching/matches	getUserMatches	Get all matched users
DELETE	/matching/unmatch/:id	unmatchUser	Remove a match
4️⃣ Blind Chat System (/blind-chat)
Method	Endpoint	Operation Name	Description
POST	/blind-chat/start	startBlindChat	Initiate a 10-minute blind chat session
GET	/blind-chat/:chatId	getBlindChat	Get blind chat session details
POST	/blind-chat/match	finalizeBlindChatMatch	Decide to match after blind chat
DELETE	/blind-chat/end/:chatId	endBlindChat	End blind chat session manually
5️⃣ Chat System (/chats)
Method	Endpoint	Operation Name	Description
GET	/chats	getUserChats	Get all user chats
GET	/chats/:chatId	getChatMessages	Get chat messages of a specific chat
POST	/chats/send	sendMessage	Send a message
DELETE	/chats/:chatId	deleteChat	Delete a chat
6️⃣ Reporting & Safety (/reports)
Method	Endpoint	Operation Name	Description
POST	/reports	reportUser	Report a user
GET	/reports	getAllReports	Get all reported users (admin)
POST	/reports/block/:userId	blockUser	Block a user
7️⃣ Notifications & Extras (/notifications)
Method	Endpoint	Operation Name	Description
GET	/notifications	getUserNotifications	Fetch user notifications
POST	/notifications/read	markNotificationsRead	Mark notifications as read
DELETE	/notifications/clear	clearNotifications	Clear all notifications
8️⃣ Like Model (Like)
ts
Copy
Edit
const likeSchema = new mongoose.Schema({
  liker: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  liked: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  status: { type: String, enum: ["pending", "matched", "rejected"], default: "pending" },
  timestamp: { type: Date, default: Date.now }
});

const Like = mongoose.model("Like", likeSchema);
export default Like;
9️⃣ Report Model (Report)
ts
Copy
Edit
const reportSchema = new mongoose.Schema({
  reporter: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  reported: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  reason: { type: String, required: true },
  status: { type: String, enum: ["pending", "resolved"], default: "pending" },
  timestamp: { type: Date, default: Date.now }
});

const Report = mongoose.model("Report", reportSchema);
export default Report;
🔟 Notification Model (Notification)
ts
Copy
Edit
const notificationSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  type: { type: String, enum: ["match", "message", "blind_chat", "like", "report"], required: true },
  message: { type: String, required: true },
  read: { type: Boolean, default: false },
  timestamp: { type: Date, default: Date.now }
});

const Notification = mongoose.model("Notification", notificationSchema);
export default Notification;
📌 MongoDB Relationships
User ↔ Interests → Many-to-Many (via interests array in User)
User ↔ Matches → Many-to-Many (Match model)
User ↔ Blind Chats → Many-to-Many (BlindChat model)
Blind Chats ↔ Messages → One-to-Many (BlindChatMessage)
User ↔ Chats → Many-to-Many (Chat)
Chats ↔ Messages → One-to-Many (Message)
User ↔ Likes → Many-to-Many (Like)
User ↔ Reports → Many-to-Many (Report)
User ↔ Notifications → One-to-Many (Notification)
🔥 Features Included:
✅ Indexes for Unique Fields (email, interests)
✅ Timestamps for Records (createdAt, updatedAt)
✅ Enum Values for Controlled Status
✅ Ref-Based Relationships for Efficient Queries


